:py:mod:`dasf.ml.cluster.agglomerative`
=======================================

.. py:module:: dasf.ml.cluster.agglomerative


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.ml.cluster.agglomerative.AgglomerativeClustering
   dasf.ml.cluster.agglomerative.AgglomerativeClusteringOp
   dasf.ml.cluster.agglomerative.AgglomerativeClusteringFitOp
   dasf.ml.cluster.agglomerative.AgglomerativeClusteringFitPredictOp




.. py:class:: AgglomerativeClustering(n_clusters=2, affinity='euclidean', connectivity=None, linkage='single', memory=None, compute_full_tree='auto', distance_threshold=None, compute_distances=False, handle=None, verbose=False, n_neighbors=10, output_type=None)

   Bases: :py:obj:`dasf.ml.cluster.classifier.ClusterClassifier`

   .. py:method:: _fit_cpu(X, y=None, convert_dtype=True)


   .. py:method:: _fit_gpu(X, y=None, convert_dtype=True)


   .. py:method:: _fit_predict_cpu(X, y=None)


   .. py:method:: _fit_predict_gpu(X, y=None)



.. py:class:: AgglomerativeClusteringOp(n_clusters=2, affinity='euclidean', connectivity=None, linkage='single', memory=None, compute_full_tree='auto', distance_threshold=None, compute_distances=False, handle=None, verbose=False, n_neighbors=10, output_type=None, checkpoint=False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

       

   .. py:method:: run()



.. py:class:: AgglomerativeClusteringFitOp(checkpoint=False)

   Bases: :py:obj:`dasf.ml.core.FitInternal`

       

   .. py:method:: dump(model)


   .. py:method:: load(model)



.. py:class:: AgglomerativeClusteringFitPredictOp(checkpoint=False)

   Bases: :py:obj:`dasf.ml.core.FitPredictInternal`

       

   .. py:method:: load(model)



