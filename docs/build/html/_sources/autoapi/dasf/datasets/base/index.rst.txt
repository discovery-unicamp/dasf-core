:py:mod:`dasf.datasets.base`
============================

.. py:module:: dasf.datasets.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.datasets.base.DatasetType
   dasf.datasets.base.Dataset
   dasf.datasets.base.DatasetLoader
   dasf.datasets.base.DatasetArray
   dasf.datasets.base.DatasetLabeled




.. py:class:: DatasetType

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: none
      :annotation: = none

      

   .. py:attribute:: cmp_gathers
      :annotation: = CMP Gathers

      

   .. py:attribute:: surface_seismic
      :annotation: = Surface Seismic

      

   .. py:attribute:: borehole_seismic
      :annotation: = Borehole Seismic

      

   .. py:attribute:: fourd_far_stack
      :annotation: = 4D Far Stack

      

   .. py:attribute:: fourd_near_stack
      :annotation: = 4D Near Stack

      

   .. py:attribute:: fourd_mid_stack
      :annotation: = 4D Mid Stack

      

   .. py:attribute:: fourd_full_stack
      :annotation: = 4D Full Stack

      

   .. py:attribute:: far_stack
      :annotation: = Far Stack

      

   .. py:attribute:: near_stack
      :annotation: = Near Stack

      

   .. py:attribute:: mid_stack
      :annotation: = Mid Stack

      

   .. py:attribute:: full_stack
      :annotation: = Full Stack

      

   .. py:attribute:: prestack_seismic
      :annotation: = Prestack Seismic

      

   .. py:attribute:: poststack_seismic
      :annotation: = Poststack Seismic

      

   .. py:attribute:: migrated_volume
      :annotation: = Migrated Volume

      

   .. py:method:: __str__()

      Return str(self).



.. py:class:: Dataset(name, subtype=DatasetType.none, download = False, root = None)

   Bases: :py:obj:`object`

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it. Datasets subclassed from this
   class can be acessed using the subscription syntax, e.g.: `dataset[index]`.

   Parameters
   ----------
   name : str
       Symbolic name of the dataset.
   subtype : DatasetType
       The type of the seismic data.
   download : bool
       If the dataset must be downloaded (the default is False).
   root : str
       Root download directory (the default is None).


   .. py:method:: __set_dataset_cache_dir()

      Set the cache directory. The dataset will first be read from the
      cache directory, if the file exists.



   .. py:method:: download()

      Download the dataset.

              


   .. py:method:: __len__()


   .. py:method:: __getitem__(idx)



.. py:class:: DatasetLoader(dataset, replicate = False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

   Class to load dataset data and generate an array. The data is loaded
   depending on the implementation.

   - `cpu` allows loading `numpy.ndarray`.
   - `gpu` allows loading `cupy.ndarray`.
   - `lazy_cpu` allows loading `dask.array` data (as numpy).
   - `lazy_gpu` allows loading `dask.array` data (as cupy).

   Each implementation defines how load is executed.

   Parameters
   ----------
   dataset : Dataset
       The dataset object to load.
   replicate : bool
       Not used (the default is False).


   .. py:method:: run_lazy_cpu()

      Load data using a DASK. Usually, this operation will append a future
      load to a DASK graph using an DASK CPU container.



   .. py:method:: run_cpu()

      Load data using an CPU container (e.g. numpy).

              


   .. py:method:: run_lazy_gpu()

      Load data using a DASK. Usually, this operation will append a future
      load to a DASK graph using an DASK GPU container.



   .. py:method:: run_gpu()

      Load data using an GPU container (e.g. cupy).

              



.. py:class:: DatasetArray(name, subtype=None, download = False, root = None, chunks='auto')

   Bases: :py:obj:`Dataset`

   Class representing an dataset wich is defined as an array of a defined
   shape.

   Parameters
   ----------
   name : str
       Symbolic name of the dataset.
   subtype : DatasetType
       The type of the seismic data.
   download : bool
       If the dataset must be downloaded (the default is False).
   root : str
       Root download directory (the default is None).
   chunks : Any
       Number of blocks of the array (the default is "auto").


   .. py:method:: __npy_header()

      Read an array header from a filelike object.

              


   .. py:method:: _lazy_load(xp, **kwargs)

      Lazy load the dataset using an CPU dask container.

      Parameters
      ----------
      xp : type
          Library used to load the file. It must follow numpy library.
      **kwargs : type
          Additional keyworkded argumnts to the load.

      Returns
      -------
      Any
          The data (or a Future load object, for `_lazy` operations).



   .. py:method:: _load(xp, **kwargs)

      Load data using CPU container.

      Parameters
      ----------
      xp : Module
          A module that load data (implement `load` function)
      **kwargs : type
          Additional `kwargs` to `xp.load` function.



   .. py:method:: _load_meta()

      Load metadata to inspect.

      Returns
      -------
      dict
          A dictionary with metadata information.



   .. py:method:: _lazy_load_gpu()

      Load data with GPU container + DASK. (It does not load immediattly)

              


   .. py:method:: _lazy_load_cpu()

      Load data with CPU container + DASK. (It does not load immediattly)

              


   .. py:method:: _load_gpu()

      Load data with GPU container (e.g. cupy).

              


   .. py:method:: _load_cpu()

      Load data with CPU container (e.g. numpy).

              


   .. py:method:: shape()
      :property:

      Returns the shape of an array.

      Returns
      -------
      tuple
          A tuple with the shape.



   .. py:method:: inspect_metadata()

      Return a dictionary with all metadata information from data.

      Returns
      -------
      dict
          A dictionary with metadata information.




.. py:class:: DatasetLabeled(name, subtype=None, download = False, root = None, chunks='auto')

   Bases: :py:obj:`Dataset`

   A class representing a labeled dataset. Each item is a 2-element tuple,
   where the first element is a array of data and the second element is the
   respective label. The items can be accessed from `dataset[x]`.

   Parameters
   ----------
   name : str
       Symbolic name of the dataset.
   subtype : DatasetType
       The type of the seismic data.
   download : bool
       If the dataset must be downloaded (the default is False).
   root : str
       Root download directory (the default is None).
   chunks : Any
       Number of blocks of the array (the default is "auto").

   Attributes
   ----------
   __chunks : type
       Description of attribute `__chunks`.


   .. py:method:: download()

      Download the dataset.

              


   .. py:method:: inspect_metadata()

      Return a dictionary with all metadata information from data
      (train and labels).

      Returns
      -------
      dict
          A dictionary with metadata information.



   .. py:method:: _lazy_load(xp, **kwargs)

      Lazy load the dataset using an CPU dask container.

      Parameters
      ----------
      xp : type
          Library used to load the file. It must follow numpy library.
      **kwargs : type
          Additional keyworkded argumnts to the load.

      Returns
      -------
      Tuple
          A Future object that will return a tuple: (data, label).



   .. py:method:: _load(xp, **kwargs)

      Load data using CPU container.

      Parameters
      ----------
      xp : Module
          A module that load data (implement `load` function)
      **kwargs : type
          Additional `kwargs` to `xp.load` function.

      Returns
      -------
      Tuple
          A 2-element tuple: (data, label)



   .. py:method:: _load_meta()

      Load metadata to inspect.

      Returns
      -------
      dict
          A dictionary with metadata information.



   .. py:method:: _lazy_load_gpu()

      Load data with GPU container + DASK. (It does not load immediattly)

              


   .. py:method:: _lazy_load_cpu()

      Load data with CPU container + DASK. (It does not load immediattly)

              


   .. py:method:: _load_gpu()

      Load data with GPU container (e.g. cupy).

              


   .. py:method:: _load_cpu()

      Load data with CPU container (e.g. numpy).

              


   .. py:method:: __getitem__(idx)



