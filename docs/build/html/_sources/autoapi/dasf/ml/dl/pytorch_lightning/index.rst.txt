:py:mod:`dasf.ml.dl.pytorch_lightning`
======================================

.. py:module:: dasf.ml.dl.pytorch_lightning


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.ml.dl.pytorch_lightning.TorchDataLoader
   dasf.ml.dl.pytorch_lightning.NeuralNetClassifier
   dasf.ml.dl.pytorch_lightning.Trainer



Functions
~~~~~~~~~

.. autoapisummary::

   dasf.ml.dl.pytorch_lightning.run_dask_clustered
   dasf.ml.dl.pytorch_lightning.fit



.. py:class:: TorchDataLoader(train, val=None, test=None, batch_size=64)

   Bases: :py:obj:`pytorch_lightning.LightningDataModule`

   .. py:method:: prepare_data()


   .. py:method:: train_dataloader()


   .. py:method:: val_dataloader()


   .. py:method:: test_dataloader()



.. py:function:: run_dask_clustered(func, client=None, **kwargs)


.. py:function:: fit(model, X, y, max_iter, accel, strategy, devices, ngpus, batch_size, plugins=None)


.. py:class:: NeuralNetClassifier(model, max_iter=100)

   .. py:method:: _lazy_fit_generic(X, y, accel, ngpus)


   .. py:method:: _lazy_fit_gpu(X, y=None)


   .. py:method:: _lazy_fit_cpu(X, y=None)


   .. py:method:: __fit_generic(X, y, accel, ngpus)


   .. py:method:: _fit_gpu(X, y=None)


   .. py:method:: _fit_cpu(X, y=None)



.. py:class:: Trainer(name='PyTorch Lightning Pipeline', num_epochs=100, batch_size=16)

   Bases: :py:obj:`dasf.pipeline.Operator`

       

   .. py:method:: setup(executor)


   .. py:method:: __run_clustered(model, train, val, batch_size, auto_scale_batch_size=None)


   .. py:method:: run(model, train, val=None)



