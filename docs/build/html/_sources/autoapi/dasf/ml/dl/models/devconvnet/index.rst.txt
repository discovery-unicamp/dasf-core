:py:mod:`dasf.ml.dl.models.devconvnet`
======================================

.. py:module:: dasf.ml.dl.models.devconvnet


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.ml.dl.models.devconvnet.MyAccuracy
   dasf.ml.dl.models.devconvnet.NNModule
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNetModule
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNetSkipModule
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNetModule
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNetSkipModule
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNet
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNetSkip
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNet
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNetSkip




.. py:class:: MyAccuracy(dist_sync_on_step=False)

   Bases: :py:obj:`torchmetrics.Metric`

   .. py:method:: set_idx(idx)


   .. py:method:: update(preds, target)


   .. py:method:: __str__()


   .. py:method:: compute()



.. py:class:: NNModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`pytorch_lightning.LightningModule`

   .. py:method:: cross_entropy_loss(input, target, weight=None, ignore_index=255)

      Use 255 to fill empty values when padding or doing any augmentation operations
      like rotation.


   .. py:method:: configure_optimizers()


   .. py:method:: training_step(batch, batch_idx)


   .. py:method:: test_step(test_batch, batch_idx)



.. py:class:: TorchPatchDeConvNetModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`NNModule`

   .. py:method:: forward(x)


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)



.. py:class:: TorchPatchDeConvNetSkipModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`NNModule`

   .. py:method:: forward(x)


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)



.. py:class:: TorchSectionDeConvNetModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`NNModule`

   .. py:method:: forward(x)


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)



.. py:class:: TorchSectionDeConvNetSkipModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`NNModule`

   .. py:method:: forward(x)


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)



.. py:class:: TorchPatchDeConvNet(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

       


.. py:class:: TorchPatchDeConvNetSkip(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

       


.. py:class:: TorchSectionDeConvNet(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

       


.. py:class:: TorchSectionDeConvNetSkip(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)

   Bases: :py:obj:`dasf.pipeline.ParameterOperator`

       


