{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a9de8fc4-806e-404b-becc-e79954a1ac9c",
   "metadata": {},
   "source": [
    "### Tutorial 3 - How Create Your Own Trasform\n",
    "\n",
    "In this tutorial, we will show you how DASF organize the structure APIs to generate code for targeted to each architecture.\n",
    "\n",
    "We will also show you how you can create your own object to and generate code dynamically to each platform.\n",
    "\n",
    "For this, let's use the same code we had used in **Tutorial 2**. Check how you can create `data.npy` before continue.\n",
    "\n",
    "Then, we need to define our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eec84166-3f6c-420b-81e6-71f9c126a440",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dasf.datasets import DatasetArray\n",
    "\n",
    "dataset = DatasetArray(name=\"My Saved NPY\", root=\"data.npy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92f243e0-64e9-4457-a18c-ea5c21740a6a",
   "metadata": {},
   "source": [
    "Here, we want to create a transform to multiple the data by the same data.\n",
    "\n",
    "First, let's inpect how the data looks like. We are using a GPU, so it will require to fetch data from GPU to CPU. If you are using a CPU, you just need to print the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef2d45e3-121c-40f1-b8d7-f84735945ee1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.22139306, 0.18095083],\n",
       "       [0.78598473, 0.28964964]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.load()\n",
    "\n",
    "dataset[:2, :2, 0].get()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa7e4593-a22d-49db-976f-00b8b8d19de5",
   "metadata": {},
   "source": [
    "Now, let's create our own transform called **Multiply**. To generate the code targeted to the running platform, we need to import and set the respective decorator. So, the code will generate the function `transform` for us dynamically. To clarigy even more, we can include some a `print` call in each function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c53d25f4-3806-46d1-8f94-ac580ee46821",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dasf.transforms import Transform\n",
    "\n",
    "\n",
    "class Multiply(Transform):\n",
    "    def _lazy_transform_cpu(self, X):\n",
    "        print(\"Lazy CPU\")\n",
    "        return X * X\n",
    "    \n",
    "    def _lazy_transform_gpu(self, X):\n",
    "        print(\"Lazy GPU\")\n",
    "        return X * X\n",
    "    \n",
    "    def _transform_cpu(self, X):\n",
    "        print(\"CPU\")\n",
    "        return X * X\n",
    "    \n",
    "    def _transform_gpu(self, X):\n",
    "        print(\"GPU\")\n",
    "        return X * X\n",
    "\n",
    "multiply = Multiply()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43efcdec-2639-4775-9abc-a92cf6fa7a8f",
   "metadata": {},
   "source": [
    "Now, we can transform our dataset and see what happens."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "875e2a54-5506-4226-bf4e-58353408e4e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GPU\n"
     ]
    }
   ],
   "source": [
    "result = multiply.transform(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf295d3-9c2b-4b4f-ae7c-60c332b2842d",
   "metadata": {},
   "source": [
    "See it triggered the GPU local function. Now, let's see and compare what is the content of `result` variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e1f6c244-51a2-42fd-964a-0a96fc4dc169",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.04901489, 0.0327432 ],\n",
       "       [0.61777199, 0.08389691]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result[:2, :2, 0].get()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f400794-0660-4ee5-b8bb-eed6e6aad03f",
   "metadata": {},
   "source": [
    "See that the result is exactly the dataset multiplied by itself. The values confirm that. Now, what happens if I would like to run CPU code instead of GPU? If I want that, I need to call directly each protected method directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "962d9a55-3de1-43e2-86a9-d0c489dd2e90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.04901489, 0.0327432 ],\n",
       "       [0.61777199, 0.08389691]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset._load_cpu()\n",
    "\n",
    "result = multiply._transform_cpu(dataset)\n",
    "\n",
    "result[:2, :2, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ab0786f-5268-40b0-8845-01900c350098",
   "metadata": {},
   "source": [
    "See now that the code triggered the CPU function obviously.\n",
    "\n",
    "Actually, if you pay attention, the implementation of each function are equal. Then, this class can be reduced to:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d311947-30bf-4ab2-bf43-8f1fa6dafc0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Multiply2(Transform):\n",
    "    def transform(self, X):\n",
    "        return X * X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcae55ea-951d-4807-9f0f-569e031fcb23",
   "metadata": {},
   "source": [
    "Without decorator and all the other functions. The reason why we have all the diferentiations is that we know we will have different data manipulation for most cases."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "test_requirements": {
   "single_gpu": true
  } 
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
