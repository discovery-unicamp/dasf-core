dasf.profile.plugins
====================

.. py:module:: dasf.profile.plugins


Classes
-------

.. autoapisummary::

   dasf.profile.plugins.WorkerTaskPlugin
   dasf.profile.plugins.ResourceMonitor
   dasf.profile.plugins.GPUAnnotationPlugin


Module Contents
---------------

.. py:class:: WorkerTaskPlugin(name = 'TracePlugin')

   Bases: :py:obj:`distributed.diagnostics.plugin.WorkerPlugin`


   Interface to extend the Worker

   A worker plugin enables custom code to run at different stages of the Workers'
   lifecycle.

   A plugin enables custom code to run at each of step of a Workers's life. Whenever such
   an event happens, the corresponding method on this class will be called. Note that the
   user code always runs within the Worker's main thread.

   To implement a plugin implement some of the methods of this class and register
   the plugin to your client in order to have it attached to every existing and
   future workers with ``Client.register_worker_plugin``.

   Examples
   --------
   >>> class ErrorLogger(WorkerPlugin):
   ...     def __init__(self, logger):
   ...         self.logger = logger
   ...
   ...     def setup(self, worker):
   ...         self.worker = worker
   ...
   ...     def transition(self, key, start, finish, *args, **kwargs):
   ...         if finish == 'error':
   ...             ts = self.worker.tasks[key]
   ...             exc_info = (type(ts.exception), ts.exception, ts.traceback)
   ...             self.logger.error(
   ...                 "Error during computation of '%s'.", key,
   ...                 exc_info=exc_info
   ...             )

   >>> import logging
   >>> plugin = ErrorLogger(logging)
   >>> client.register_worker_plugin(plugin)  # doctest: +SKIP


   .. py:attribute:: name


   .. py:method:: setup(worker)

      Run when the plugin is attached to a worker. This happens when the plugin is registered
      and attached to existing workers, or when a worker is created after the plugin has been
      registered.



   .. py:method:: transition(key, start, finish, *args, **kwargs)

      Throughout the lifecycle of a task (see :doc:`Worker State
      <worker-state>`), Workers are instructed by the scheduler to compute
      certain tasks, resulting in transitions in the state of each task. The
      Worker owning the task is then notified of this state transition.

      Whenever a task changes its state, this method will be called.

      .. warning::

          This is an advanced feature and the transition mechanism and details
          of task states are subject to change without deprecation cycle.

      Parameters
      ----------
      key : string
      start : string
          Start state of the transition.
          One of waiting, ready, executing, long-running, memory, error.
      finish : string
          Final state of the transition.
      kwargs : More options passed when transitioning



.. py:class:: ResourceMonitor(time=100, autostart = True, name = 'ResourceMonitor', **monitor_kwargs)

   .. py:attribute:: time


   .. py:attribute:: name


   .. py:attribute:: hostname


   .. py:attribute:: database


   .. py:attribute:: monitor


   .. py:attribute:: callback


   .. py:method:: __del__()


   .. py:method:: update()


   .. py:method:: start()


   .. py:method:: stop()


.. py:class:: GPUAnnotationPlugin(name = 'GPUAnnotationPlugin')

   Bases: :py:obj:`distributed.diagnostics.plugin.WorkerPlugin`


   Interface to extend the Worker

   A worker plugin enables custom code to run at different stages of the Workers'
   lifecycle.

   A plugin enables custom code to run at each of step of a Workers's life. Whenever such
   an event happens, the corresponding method on this class will be called. Note that the
   user code always runs within the Worker's main thread.

   To implement a plugin implement some of the methods of this class and register
   the plugin to your client in order to have it attached to every existing and
   future workers with ``Client.register_worker_plugin``.

   Examples
   --------
   >>> class ErrorLogger(WorkerPlugin):
   ...     def __init__(self, logger):
   ...         self.logger = logger
   ...
   ...     def setup(self, worker):
   ...         self.worker = worker
   ...
   ...     def transition(self, key, start, finish, *args, **kwargs):
   ...         if finish == 'error':
   ...             ts = self.worker.tasks[key]
   ...             exc_info = (type(ts.exception), ts.exception, ts.traceback)
   ...             self.logger.error(
   ...                 "Error during computation of '%s'.", key,
   ...                 exc_info=exc_info
   ...             )

   >>> import logging
   >>> plugin = ErrorLogger(logging)
   >>> client.register_worker_plugin(plugin)  # doctest: +SKIP


   .. py:attribute:: name


   .. py:attribute:: gpu_num
      :value: None



   .. py:attribute:: marks


   .. py:method:: setup(worker)

      Run when the plugin is attached to a worker. This happens when the plugin is registered
      and attached to existing workers, or when a worker is created after the plugin has been
      registered.



   .. py:method:: transition(key, start, finish, *args, **kwargs)

      Throughout the lifecycle of a task (see :doc:`Worker State
      <worker-state>`), Workers are instructed by the scheduler to compute
      certain tasks, resulting in transitions in the state of each task. The
      Worker owning the task is then notified of this state transition.

      Whenever a task changes its state, this method will be called.

      .. warning::

          This is an advanced feature and the transition mechanism and details
          of task states are subject to change without deprecation cycle.

      Parameters
      ----------
      key : string
      start : string
          Start state of the transition.
          One of waiting, ready, executing, long-running, memory, error.
      finish : string
          Final state of the transition.
      kwargs : More options passed when transitioning



