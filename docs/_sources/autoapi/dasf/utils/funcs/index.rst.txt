dasf.utils.funcs
================

.. py:module:: dasf.utils.funcs

.. autoapi-nested-parse::

   Generic and regular functions. 



Attributes
----------

.. autoapisummary::

   dasf.utils.funcs.GPU_SUPPORTED
   dasf.utils.funcs.JAX_SUPPORTED
   dasf.utils.funcs.KVIKIO_SUPPORTED
   dasf.utils.funcs.NV_COMP_BATCH_CODEC_SUPPORTED


Classes
-------

.. autoapisummary::

   dasf.utils.funcs.NotebookProgressBar


Functions
---------

.. autoapisummary::

   dasf.utils.funcs.human_readable_size
   dasf.utils.funcs.get_worker_info
   dasf.utils.funcs.sync_future_loop
   dasf.utils.funcs.download_file
   dasf.utils.funcs.download_file_from_gdrive
   dasf.utils.funcs.get_machine_memory_avail
   dasf.utils.funcs.set_executor_default
   dasf.utils.funcs.set_executor_cpu
   dasf.utils.funcs.set_executor_gpu
   dasf.utils.funcs.set_executor_multi_cpu
   dasf.utils.funcs.set_executor_multi_gpu
   dasf.utils.funcs.is_executor_single
   dasf.utils.funcs.is_executor_cluster
   dasf.utils.funcs.is_executor_cpu
   dasf.utils.funcs.is_executor_gpu
   dasf.utils.funcs.executor_to_string
   dasf.utils.funcs.is_gpu_supported
   dasf.utils.funcs.is_kvikio_supported
   dasf.utils.funcs.is_gds_supported
   dasf.utils.funcs.is_kvikio_compat_mode
   dasf.utils.funcs.is_nvcomp_codec_supported
   dasf.utils.funcs.is_jax_supported
   dasf.utils.funcs.is_dask_local_supported
   dasf.utils.funcs.get_dask_running_client
   dasf.utils.funcs.get_backend_supported
   dasf.utils.funcs.is_dask_supported
   dasf.utils.funcs.is_dask_gpu_supported
   dasf.utils.funcs.get_gpu_from_workers
   dasf.utils.funcs.get_gpu_count
   dasf.utils.funcs.get_dask_gpu_count
   dasf.utils.funcs.get_dask_gpu_names
   dasf.utils.funcs.block_chunk_reduce
   dasf.utils.funcs.trim_chunk_location
   dasf.utils.funcs.get_dask_mem_usage
   dasf.utils.funcs.is_notebook
   dasf.utils.funcs.weight_gaussian
   dasf.utils.funcs.weight_radial


Module Contents
---------------

.. py:data:: GPU_SUPPORTED

.. py:data:: JAX_SUPPORTED

.. py:data:: KVIKIO_SUPPORTED
   :value: True


.. py:data:: NV_COMP_BATCH_CODEC_SUPPORTED
   :value: True


.. py:function:: human_readable_size(size, decimal=3)

   converts data size into the proper measurement


.. py:function:: get_worker_info(client)

   Returns a list of workers (sorted), and the DNS name for the master host
   The master is the 0th worker's host


.. py:function:: sync_future_loop(futures)

   Synchronize all futures submitted to workers.


.. py:class:: NotebookProgressBar

   Bases: :py:obj:`threading.Thread`


   ProgressBar representation for ipython notebooks only.

   Constructor of the Progress Bar


   .. py:attribute:: MIN_CUR


   .. py:attribute:: MIN_TOTAL


   .. py:method:: show()

      Return the HTML representation of the ProgressBar.



   .. py:method:: set_current(current, total)

      Set current value of the bar progress



   .. py:method:: set_error(error)

      Set an error if it exists.



   .. py:method:: run()

      Thread main loop that updates the bar progress.



.. py:function:: download_file(url, filename=None, directory=None)

   Download a generic file and save it.


.. py:function:: download_file_from_gdrive(file_id, filename=None, directory=None)

   Download a file from Google Drive using gdrive file id.


.. py:function:: get_machine_memory_avail()

   Return free memory available from a single machine.


.. py:function:: set_executor_default()

   Return executor as a CPU (default) instance.


.. py:function:: set_executor_cpu()

   Return executor as a CPU instance.


.. py:function:: set_executor_gpu()

   Return executor as a GPU instance.


.. py:function:: set_executor_multi_cpu()

   Return executor as a Multi CPU instance.


.. py:function:: set_executor_multi_gpu()

   Return executor as a GPU instance.


.. py:function:: is_executor_single(dtype)

   Return if the executor is a single machine instance.


.. py:function:: is_executor_cluster(dtype)

   Return if the executor is a cluster instance.


.. py:function:: is_executor_cpu(dtype)

   Return if the executor is a CPU instance.


.. py:function:: is_executor_gpu(dtype)

   Return if the executor is a GPU instance.


.. py:function:: executor_to_string(dtype)

   Return the executor type as a string.


.. py:function:: is_gpu_supported()

   Return if GPU is supported.


.. py:function:: is_kvikio_supported()

   Return if kvikio is supported (installed).


.. py:function:: is_gds_supported()

   Return if GPU Direct Store is supported.


.. py:function:: is_kvikio_compat_mode()

   Return if Kvikio is running in compatibility mode.


.. py:function:: is_nvcomp_codec_supported()

   Return if NVidia Compressor Codecs are supported.


.. py:function:: is_jax_supported()

   Return if JAX is supported.


.. py:function:: is_dask_local_supported()

   Return if Dask is supported locally by the executor.


.. py:function:: get_dask_running_client()

   Get Dask runner stanza.


.. py:function:: get_backend_supported(func)

   Get backend support.


.. py:function:: is_dask_supported()

   Return if Dask is supported by the executor.


.. py:function:: is_dask_gpu_supported()

   Return if any node supports GPU.


.. py:function:: get_gpu_from_workers()

   Return if any worker has a GPU available.


.. py:function:: get_gpu_count()

   Get single node GPU count.


.. py:function:: get_dask_gpu_count(fetch=True)

   Get how many GPUs are available in each worker.


.. py:function:: get_dask_gpu_names(fetch=True)

   Get all GPU names of each worker.


.. py:function:: block_chunk_reduce(dask_data, output_chunk)

   Reduce the chunk according the new output size.


.. py:function:: trim_chunk_location(block_info, depth, index=0)

   Trim an overlapped chunk to the exact size of the chunk.


.. py:function:: get_dask_mem_usage(profiler)

   Get Dask memory usage profile.


.. py:function:: is_notebook()

   Return if the code is being executed in a IPyNotebook.


.. py:function:: weight_gaussian(shape)

   Produces a NDArray for a given shape with a Gaussian Distribution in all directions starting from the center


.. py:function:: weight_radial(shape)

   Produces a NDArray for a given shape with a decreasing rate starting from the center


