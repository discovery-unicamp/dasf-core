:py:mod:`dasf.utils.funcs`
==========================

.. py:module:: dasf.utils.funcs

.. autoapi-nested-parse::

   Generic and regular functions. 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.utils.funcs.NotebookProgressBar



Functions
~~~~~~~~~

.. autoapisummary::

   dasf.utils.funcs.human_readable_size
   dasf.utils.funcs.get_full_qualname
   dasf.utils.funcs.get_worker_info
   dasf.utils.funcs.sync_future_loop
   dasf.utils.funcs.download_file
   dasf.utils.funcs.download_file_from_gdrive
   dasf.utils.funcs.get_machine_memory_avail
   dasf.utils.funcs.set_executor_default
   dasf.utils.funcs.set_executor_gpu
   dasf.utils.funcs.is_executor_single
   dasf.utils.funcs.is_executor_cluster
   dasf.utils.funcs.is_executor_cpu
   dasf.utils.funcs.is_executor_gpu
   dasf.utils.funcs.is_gpu_supported
   dasf.utils.funcs.is_dask_local_supported
   dasf.utils.funcs.get_dask_running_client
   dasf.utils.funcs.is_dask_supported
   dasf.utils.funcs.is_dask_gpu_supported
   dasf.utils.funcs.get_gpu_count
   dasf.utils.funcs.get_dask_gpu_count
   dasf.utils.funcs.block_chunk_reduce
   dasf.utils.funcs.return_local_and_gpu
   dasf.utils.funcs.get_dask_mem_usage
   dasf.utils.funcs.is_notebook



Attributes
~~~~~~~~~~

.. autoapisummary::

   dasf.utils.funcs.GPU_SUPPORTED


.. py:data:: GPU_SUPPORTED

   

.. py:function:: human_readable_size(size, decimal=3)

   converts data size into the proper measurement


.. py:function:: get_full_qualname(obj)

   Return fully qualified name of objects.


.. py:function:: get_worker_info(client)

   Returns a list of workers (sorted), and the DNS name for the master host
   The master is the 0th worker's host


.. py:function:: sync_future_loop(futures)

   Synchronize all futures submitted to workers.


.. py:class:: NotebookProgressBar

   Bases: :py:obj:`threading.Thread`

   A class that represents a thread of control.

   This class can be safely subclassed in a limited fashion. There are two ways
   to specify the activity: by passing a callable object to the constructor, or
   by overriding the run() method in a subclass.


   This constructor should always be called with keyword arguments. Arguments are:

   *group* should be None; reserved for future extension when a ThreadGroup
   class is implemented.

   *target* is the callable object to be invoked by the run()
   method. Defaults to None, meaning nothing is called.

   *name* is the thread name. By default, a unique name is constructed of
   the form "Thread-N" where N is a small decimal number.

   *args* is the argument tuple for the target invocation. Defaults to ().

   *kwargs* is a dictionary of keyword arguments for the target
   invocation. Defaults to {}.

   If a subclass overrides the constructor, it must make sure to invoke
   the base class constructor (Thread.__init__()) before doing anything
   else to the thread.


   .. py:attribute:: MIN_CUR

      

   .. py:attribute:: MIN_TOTAL

      

   .. py:method:: show()


   .. py:method:: set_current(current, total)


   .. py:method:: set_error(error)


   .. py:method:: run()

      Method representing the thread's activity.

      You may override this method in a subclass. The standard run() method
      invokes the callable object passed to the object's constructor as the
      target argument, if any, with sequential and keyword arguments taken
      from the args and kwargs arguments, respectively.




.. py:function:: download_file(url, filename=None, directory=None)

   Download a generic file and save it.


.. py:function:: download_file_from_gdrive(file_id, filename=None, directory=None)

   Download a file from Google Drive using gdrive file id.


.. py:function:: get_machine_memory_avail()

   Return free memory available from a single machine.


.. py:function:: set_executor_default()

   Return executor as a CPU (default) instance.


.. py:function:: set_executor_gpu()

   Return executor as a GPU instance.


.. py:function:: is_executor_single(dtype)

   Return if the executor is a single machine instance.


.. py:function:: is_executor_cluster(dtype)

   Return if the executor is a cluster instance.


.. py:function:: is_executor_cpu(dtype)

   Return if the executor is a CPU instance.


.. py:function:: is_executor_gpu(dtype)

   Return if the executor is a GPU instance.


.. py:function:: is_gpu_supported()

   Return if GPU is supported.


.. py:function:: is_dask_local_supported()

   Return if Dask is supported locally by the executor.


.. py:function:: get_dask_running_client()

   Get Dask runner stanza.


.. py:function:: is_dask_supported()

   Return if Dask is supported by the executor.


.. py:function:: is_dask_gpu_supported()

   Return if any node supports GPU.


.. py:function:: get_gpu_count()

   Get single node GPU count.


.. py:function:: get_dask_gpu_count(fetch=True)

   Get how many GPUs are available in each worker.


.. py:function:: block_chunk_reduce(dask_data, output_chunk)

   Reduce the chunk according the new output size.


.. py:function:: return_local_and_gpu(executor, local, gpu)

   Return executor type based on passed preferences.


.. py:function:: get_dask_mem_usage(profiler)

   Get Dask memory usage profile.


.. py:function:: is_notebook()

   Return if the code is being executed in a IPyNotebook.


