:py:mod:`dasf.transforms`
=========================

.. py:module:: dasf.transforms


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   memory/index.rst
   operations/index.rst
   transforms/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.transforms.ArraysToDataFrame
   dasf.transforms.ArrayToZarr
   dasf.transforms.ArrayToHDF5
   dasf.transforms.Normalize
   dasf.transforms.SliceArray
   dasf.transforms.SliceArrayByPercent
   dasf.transforms.Reshape
   dasf.transforms.PersistDaskData
   dasf.transforms.LoadDaskData
   dasf.transforms.Fit
   dasf.transforms.FitPredict
   dasf.transforms.FitTransform
   dasf.transforms.Predict
   dasf.transforms.GetParams
   dasf.transforms.TargeteredTransform
   dasf.transforms.MappedTransform




.. py:class:: ArraysToDataFrame

   Bases: :py:obj:`dasf.transforms.base.Transform`

   .. py:method:: __transform_generic(X, y)


   .. py:method:: _lazy_transform_cpu(X=None, **kwargs)


   .. py:method:: _lazy_transform_gpu(X=None, **kwargs)


   .. py:method:: _transform_gpu(X=None, **kwargs)


   .. py:method:: _transform_cpu(X=None, **kwargs)



.. py:class:: ArrayToZarr(chunks=None, save=True, filename=None)

   Bases: :py:obj:`dasf.transforms.base.Transform`

   .. py:method:: _convert_filename(url)
      :staticmethod:


   .. py:method:: _lazy_transform_generic_all(data)


   .. py:method:: _transform_generic_all(data, chunks, **kwargs)


   .. py:method:: _lazy_transform_generic(X, **kwargs)


   .. py:method:: _transform_generic(X, **kwargs)


   .. py:method:: _lazy_transform_gpu(X, **kwargs)


   .. py:method:: _lazy_transform_cpu(X, **kwargs)


   .. py:method:: _transform_gpu(X, **kwargs)


   .. py:method:: _transform_cpu(X, **kwargs)



.. py:class:: ArrayToHDF5(dataset_path, chunks=None, save=True, filename=None)

   Bases: :py:obj:`dasf.transforms.base.Transform`

   .. py:method:: _convert_filename(url)
      :staticmethod:


   .. py:method:: _lazy_transform_generic_all(data)


   .. py:method:: _transform_generic_all(data)


   .. py:method:: _lazy_transform_generic(X, **kwargs)


   .. py:method:: _transform_generic(X, **kwargs)


   .. py:method:: _lazy_transform_gpu(X, **kwargs)


   .. py:method:: _lazy_transform_cpu(X, **kwargs)


   .. py:method:: _transform_gpu(X, **kwargs)


   .. py:method:: _transform_cpu(X, **kwargs)



.. py:class:: Normalize

   Bases: :py:obj:`dasf.transforms.base.Transform`

   .. py:method:: transform(X)



.. py:class:: SliceArray(output_size)

   .. py:method:: transform(X)



.. py:class:: SliceArrayByPercent(x=100.0, y=100.0, z=100.0)

   Bases: :py:obj:`dasf.transforms.base.Transform`

   .. py:method:: transform(X)



.. py:class:: Reshape(shape)

   Reshape data with a new shape.

   Parameters
   ----------
   shape : tuple
       The new shape of the data.


   .. py:method:: run(X)



.. py:class:: PersistDaskData

   Bases: :py:obj:`dasf.transforms.base.Transform`

   Allow persisting a dask array to memory and return a copy of the object.
   It will gather the data blocks from all workers and resembles locally.

   .. py:method:: __lazy_transform_generic(X)


   .. py:method:: _lazy_transform_cpu(X)


   .. py:method:: _lazy_transform_gpu(X)


   .. py:method:: _transform_cpu(X)


   .. py:method:: _transform_gpu(X)



.. py:class:: LoadDaskData

   Bases: :py:obj:`dasf.transforms.base.Transform`

   Allow persisting a dask array to memory. It will gather the data blocks
   from all workers and resembles locally.

   .. py:method:: __lazy_transform_generic(X)


   .. py:method:: _lazy_transform_cpu(X)


   .. py:method:: _lazy_transform_gpu(X)


   .. py:method:: _transform_cpu(X)


   .. py:method:: _transform_gpu(X)



.. py:class:: Fit

   .. py:method:: _lazy_fit_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _lazy_fit_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: fit(X, y, sample_weight=None, **kwargs)


   .. py:method:: fit_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:



.. py:class:: FitPredict

   .. py:method:: _lazy_fit_predict_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _lazy_fit_predict_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_predict_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_predict_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: fit_predict(X, y=None, **kwargs)


   .. py:method:: fit_predict_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:



.. py:class:: FitTransform

   .. py:method:: _lazy_fit_transform_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _lazy_fit_transform_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_transform_cpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: _fit_transform_gpu(X, y=None, **kwargs)
      :abstractmethod:


   .. py:method:: fit_transform(X, y=None, **kwargs)


   .. py:method:: fit_transform_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:



.. py:class:: Predict

   .. py:method:: _lazy_predict_cpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


   .. py:method:: _lazy_predict_gpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


   .. py:method:: _predict_cpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


   .. py:method:: _predict_gpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


   .. py:method:: predict(X, sample_weight=None, **kwargs)


   .. py:method:: predict_from_model(model, X, sample_weight=None, **kwargs)
      :staticmethod:



.. py:class:: GetParams

   .. py:method:: _lazy_get_params_cpu(deep=True, **kwargs)
      :abstractmethod:


   .. py:method:: _lazy_get_params_gpu(deep=True, **kwargs)
      :abstractmethod:


   .. py:method:: _get_params_cpu(deep=True, **kwargs)
      :abstractmethod:


   .. py:method:: _get_params_gpu(deep=True, **kwargs)
      :abstractmethod:


   .. py:method:: get_params(deep=True, **kwargs)



.. py:class:: TargeteredTransform(run_local=None, run_gpu=None)


.. py:class:: MappedTransform(function, depth=None, boundary=None, trim=True, output_chunk=None)

   Bases: :py:obj:`Transform`

   .. py:method:: __lazy_transform_generic(X, **kwargs)


   .. py:method:: _lazy_transform_cpu(X, **kwargs)


   .. py:method:: _lazy_transform_gpu(X, **kwargs)


   .. py:method:: _transform_cpu(X, **kwargs)


   .. py:method:: _transform_gpu(X, **kwargs)


   .. py:method:: transform(X, **kwargs)



