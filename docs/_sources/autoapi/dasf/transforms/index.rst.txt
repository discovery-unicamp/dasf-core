dasf.transforms
===============

.. py:module:: dasf.transforms


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/dasf/transforms/base/index
   /autoapi/dasf/transforms/memory/index
   /autoapi/dasf/transforms/operations/index
   /autoapi/dasf/transforms/transforms/index


Classes
-------

.. autoapisummary::

   dasf.transforms.MappedTransform
   dasf.transforms.ReductionTransform
   dasf.transforms.TargeteredTransform
   dasf.transforms.Fit
   dasf.transforms.FitPredict
   dasf.transforms.FitTransform
   dasf.transforms.GetParams
   dasf.transforms.Predict
   dasf.transforms.ComputeDaskData
   dasf.transforms.PersistDaskData
   dasf.transforms.Reshape
   dasf.transforms.SliceArray
   dasf.transforms.SliceArrayByPercent
   dasf.transforms.ArraysToDataFrame
   dasf.transforms.ArrayToHDF5
   dasf.transforms.ArrayToZarr
   dasf.transforms.ExtractData
   dasf.transforms.Normalize
   dasf.transforms.ZarrToArray


Package Contents
----------------

.. py:class:: MappedTransform(function, depth=None, boundary=None, trim=True, output_chunk=None, drop_axis=None, new_axis=None)

   Bases: :py:obj:`Transform`


   Class representing a MappedTransform based on Transform
   object.

   This object refers to any operation that can be done in blocks.
   In special, for Dask chunks. There are several ways of doing
   that. This class tries to simplify how the functions are applied
   into a block.

   Parameters
   ----------
   function : Callable
       A function that will be applied in a block.
   depth : tuple
       The value of the boundary elements per axis (the default is
       None).
   boundary : str
       The type of the boundary. See Dask boundaries for more
       examples (the default is None).
   trim : bool
       Option to trim the data after an overlap (the default is
       True).
   output_chunk : tuple
       New shape of the output after computing the function (the
       default is None).
   drop_axis : tuple
       Which axis should be deleted after computing the function
       (the default is None).
   new_axis : tuple
       Which axis represent a new axis after computing the function
       (the default is None).



   .. py:method:: __lazy_transform_generic(X, xp, **kwargs)


   .. py:method:: _lazy_transform_cpu(X, **kwargs)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _lazy_transform_gpu(X, **kwargs)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _transform_cpu(X, **kwargs)

      Respective immediate transform mocked function for local CPU(s).



   .. py:method:: _transform_gpu(X, **kwargs)

      Respective immediate transform mocked function for local GPU(s).



   .. py:method:: transform(X, **kwargs)

      Generic transform funtion according executor.



.. py:class:: ReductionTransform(output_size, func_aggregate, func_chunk, func_combine=None)

   Bases: :py:obj:`Transform`


   Class representing a Reduction based on Transform
   object.

   This is a simple MapReduction operation using Dask.

   Parameters
   ----------
   output_size : tuple
       The size of the new output.
   func_aggregate : Callable
       The function called to aggregate the result of each chunk.
   func_chunk : Callable
       The function applied in each chunk.
   func_combine : Callable
       The function to combine each reduction of aggregate (the
       default is None).



   .. py:method:: _operation_aggregate_cpu(block, axis=None, keepdims=False)


   .. py:method:: _operation_aggregate_gpu(block, axis=None, keepdims=False)


   .. py:method:: _operation_combine_cpu(block, axis=None, keepdims=False)


   .. py:method:: _operation_combine_gpu(block, axis=None, keepdims=False)


   .. py:method:: _operation_chunk_cpu(block, axis=None, keepdims=False)


   .. py:method:: _operation_chunk_gpu(block, axis=None, keepdims=False)


   .. py:method:: _lazy_transform_cpu(X, *args, **kwargs)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _lazy_transform_gpu(X, *args, **kwargs)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _transform_cpu(X, *args, **kwargs)

      Respective immediate transform mocked function for local CPU(s).



   .. py:method:: _transform_gpu(X, *args, **kwargs)

      Respective immediate transform mocked function for local GPU(s).



   .. py:method:: transform(X, *args, **kwargs)

      Generic transform funtion according executor.



.. py:class:: TargeteredTransform(run_local=None, run_gpu=None)

   Bases: :py:obj:`Transform`


   Class representing a Targetered Transform operation of the pipeline.

   This specific transform operates according the parameters of the
   constructor.

   Parameters
   ----------
   run_local : bool
       Define that the operator will run locally and not distributed.
   run_gpu : bool
       Define if the operator will use GPU(s) or not.



.. py:class:: Fit

   Bases: :py:obj:`Operator`


   Class representing a Fit operation of the pipeline.


   .. py:method:: _lazy_fit_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit mocked function for CPUs.



   .. py:method:: _lazy_fit_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit mocked function for GPUs.



   .. py:method:: _fit_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit mocked function for local CPU(s).



   .. py:method:: _fit_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit mocked function for local GPU(s).



   .. py:method:: fit(X, y, sample_weight=None, **kwargs)

      Generic fit funtion according executor.



   .. py:method:: fit_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:


      Return the model of a previous created object.



.. py:class:: FitPredict

   Bases: :py:obj:`Operator`


   Class representing a Fit with Predict operation of the pipeline.


   .. py:method:: _lazy_fit_predict_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit with predict mocked function for CPUs.



   .. py:method:: _lazy_fit_predict_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit with predict mocked function for GPUs.



   .. py:method:: _fit_predict_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit with predict mocked function for local CPU(s).



   .. py:method:: _fit_predict_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit with predict mocked function for local GPU(s).



   .. py:method:: fit_predict(X, y=None, **kwargs)

      Generic fit with predict funtion according executor.



   .. py:method:: fit_predict_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:


      Return the model of a previous created object.



.. py:class:: FitTransform

   Bases: :py:obj:`Operator`


   Class representing a Fit with Transform operation of the pipeline.


   .. py:method:: _lazy_fit_transform_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit with transform mocked function for CPUs.



   .. py:method:: _lazy_fit_transform_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective lazy fit with transform mocked function for GPUs.



   .. py:method:: _fit_transform_cpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit with transform mocked function for local CPU(s).



   .. py:method:: _fit_transform_gpu(X, y=None, **kwargs)
      :abstractmethod:


      Respective immediate fit with transform mocked function for local GPU(s).



   .. py:method:: fit_transform(X, y=None, **kwargs)

      Generic fit with transform funtion according executor.



   .. py:method:: fit_transform_from_model(model, X, y, sample_weight=None, **kwargs)
      :staticmethod:


      Return the model of a previous created object.



.. py:class:: GetParams

   Bases: :py:obj:`Operator`


   Class representing a Get Parameters operation of the pipeline.


   .. py:method:: _lazy_get_params_cpu(deep=True, **kwargs)
      :abstractmethod:


      Respective lazy get_params mocked function for CPUs.



   .. py:method:: _lazy_get_params_gpu(deep=True, **kwargs)
      :abstractmethod:


      Respective lazy get_params mocked function for GPUs.



   .. py:method:: _get_params_cpu(deep=True, **kwargs)
      :abstractmethod:


      Respective immediate get_params mocked function for local CPU(s).



   .. py:method:: _get_params_gpu(deep=True, **kwargs)
      :abstractmethod:


      Respective immediate get_params mocked function for local GPU(s).



   .. py:method:: get_params(deep=True, **kwargs)

      Generic get_params funtion according executor.



.. py:class:: Predict

   Bases: :py:obj:`Operator`


   Class representing a Predict operation of the pipeline.


   .. py:method:: _lazy_predict_cpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


      Respective lazy predict mocked function for CPUs.



   .. py:method:: _lazy_predict_gpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


      Respective lazy predict mocked function for GPUs.



   .. py:method:: _predict_cpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


      Respective immediate predict mocked function for local CPU(s).



   .. py:method:: _predict_gpu(X, sample_weight=None, **kwargs)
      :abstractmethod:


      Respective immediate predict mocked function for local GPU(s).



   .. py:method:: predict(X, sample_weight=None, **kwargs)

      Generic predict funtion according executor.



   .. py:method:: predict_from_model(model, X, sample_weight=None, **kwargs)
      :staticmethod:


      Return the model of a previous created object.



.. py:class:: ComputeDaskData

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Allow persisting a dask array to memory. It will gather the data blocks
   from all workers and resembles locally.


   .. py:method:: __lazy_transform_generic(X)


   .. py:method:: _lazy_transform_cpu(X)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _lazy_transform_gpu(X)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _transform_cpu(X)

      Respective immediate transform mocked function for local CPU(s).



   .. py:method:: _transform_gpu(X)

      Respective immediate transform mocked function for local GPU(s).



.. py:class:: PersistDaskData

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Allow persisting a dask array to memory and return a copy of the object.
   It will gather the data blocks from all workers and resembles locally.


   .. py:method:: __lazy_transform_generic(X)


   .. py:method:: _lazy_transform_cpu(X)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _lazy_transform_gpu(X)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _transform_cpu(X)

      Respective immediate transform mocked function for local CPU(s).



   .. py:method:: _transform_gpu(X)

      Respective immediate transform mocked function for local GPU(s).



.. py:class:: Reshape(shape = None)

   Bases: :py:obj:`dasf.transforms.base.Fit`


   Get a slice of a cube. An inline slice is a section over the x-axis.

   Parameters
   ----------
   iline_index : int
       The index of the inline to get.



   .. py:method:: fit(X, y=None)

      Generic fit funtion according executor.



.. py:class:: SliceArray(output_size)

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: transform(X)

      Generic transform funtion according executor.



.. py:class:: SliceArrayByPercent(x=100.0, y=100.0, z=100.0)

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: transform(X)

      Generic transform funtion according executor.



.. py:class:: ArraysToDataFrame

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: _build_dataframe(data, columns, xp, df)


   .. py:method:: _lazy_transform(xp, df, **kwargs)


   .. py:method:: _lazy_transform_cpu(X=None, **kwargs)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _lazy_transform_gpu(X=None, **kwargs)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _transform(xp, df, **kwargs)


   .. py:method:: _transform_cpu(X=None, **kwargs)

      Respective immediate transform mocked function for local CPU(s).



   .. py:method:: _transform_gpu(X=None, **kwargs)

      Respective immediate transform mocked function for local GPU(s).



.. py:class:: ArrayToHDF5(dataset_path, chunks=None, save=True, filename=None)

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: _convert_filename(url)
      :staticmethod:



   .. py:method:: _lazy_transform_generic_all(data)


   .. py:method:: _transform_generic_all(data)


   .. py:method:: _lazy_transform_generic(X, **kwargs)


   .. py:method:: _transform_generic(X, **kwargs)


   .. py:method:: _lazy_transform_gpu(X, **kwargs)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _lazy_transform_cpu(X, **kwargs)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _transform_gpu(X, **kwargs)

      Respective immediate transform mocked function for local GPU(s).



   .. py:method:: _transform_cpu(X, **kwargs)

      Respective immediate transform mocked function for local CPU(s).



.. py:class:: ArrayToZarr(chunks=None, save=True, filename=None)

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: _convert_filename(url)
      :staticmethod:



   .. py:method:: _lazy_transform_generic_all(data)


   .. py:method:: _transform_generic_all(data, chunks, **kwargs)


   .. py:method:: _lazy_transform_generic(X, **kwargs)


   .. py:method:: _transform_generic(X, **kwargs)


   .. py:method:: _lazy_transform_gpu(X, **kwargs)

      Respective lazy transform mocked function for GPUs.



   .. py:method:: _lazy_transform_cpu(X, **kwargs)

      Respective lazy transform mocked function for CPUs.



   .. py:method:: _transform_gpu(X, **kwargs)

      Respective immediate transform mocked function for local GPU(s).



   .. py:method:: _transform_cpu(X, **kwargs)

      Respective immediate transform mocked function for local CPU(s).



.. py:class:: ExtractData

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Extract Data from Dataset Object
       


   .. py:method:: transform(X)

      Generic transform funtion according executor.



.. py:class:: Normalize

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: transform(X)

      Generic transform funtion according executor.



.. py:class:: ZarrToArray(chunks=None, save=True, filename=None)

   Bases: :py:obj:`dasf.transforms.base.Transform`


   Class representing a Transform operation of the pipeline.


   .. py:method:: _convert_filename(url)
      :staticmethod:



   .. py:method:: transform(X)

      Generic transform funtion according executor.



